// Mocks generated by Mockito 5.4.4 from annotations
// in local_fx/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:local_fx/src/features/common/domain/enums/enums.dart' as _i8;
import 'package:local_fx/src/features/common/domain/models/preferences/preferences.dart'
    as _i2;
import 'package:local_fx/src/features/common/infrastructure/device_info_service.dart'
    as _i3;
import 'package:local_fx/src/features/common/infrastructure/logging_service.dart'
    as _i6;
import 'package:local_fx/src/features/common/infrastructure/preference_service.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePreferences_0 extends _i1.SmartFake implements _i2.Preferences {
  _FakePreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoService extends _i1.Mock implements _i3.DeviceInfoService {
  MockDeviceInfoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  String get appName => (super.noSuchMethod(
        Invocation.getter(#appName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#appName),
        ),
      ) as String);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  String get versionWithBuildNumber => (super.noSuchMethod(
        Invocation.getter(#versionWithBuildNumber),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#versionWithBuildNumber),
        ),
      ) as String);

  @override
  bool get versionChanged => (super.noSuchMethod(
        Invocation.getter(#versionChanged),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i6.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void info(
    Type? type,
    String? msg, [
    List<Object>? args,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [
            type,
            msg,
            args,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    Type? type,
    String? msg, [
    dynamic ex,
    StackTrace? trace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            type,
            msg,
            ex,
            trace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    Type? type,
    String? msg, {
    dynamic ex,
    StackTrace? trace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            type,
            msg,
          ],
          {
            #ex: ex,
            #trace: trace,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PreferenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceService extends _i1.Mock implements _i7.PreferenceService {
  MockPreferenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.AppThemeType get appTheme => (super.noSuchMethod(
        Invocation.getter(#appTheme),
        returnValue: _i8.AppThemeType.light,
      ) as _i8.AppThemeType);

  @override
  set appTheme(_i8.AppThemeType? theme) => super.noSuchMethod(
        Invocation.setter(
          #appTheme,
          theme,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.AppLanguageType get language => (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: _i8.AppLanguageType.english,
      ) as _i8.AppLanguageType);

  @override
  set language(_i8.AppLanguageType? lang) => super.noSuchMethod(
        Invocation.setter(
          #language,
          lang,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isFirstInstall => (super.noSuchMethod(
        Invocation.getter(#isFirstInstall),
        returnValue: false,
      ) as bool);

  @override
  set isFirstInstall(bool? itIs) => super.noSuchMethod(
        Invocation.setter(
          #isFirstInstall,
          itIs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.AutoThemeModeType get autoThemeMode => (super.noSuchMethod(
        Invocation.getter(#autoThemeMode),
        returnValue: _i8.AutoThemeModeType.on,
      ) as _i8.AutoThemeModeType);

  @override
  set autoThemeMode(_i8.AutoThemeModeType? themeMode) => super.noSuchMethod(
        Invocation.setter(
          #autoThemeMode,
          themeMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Preferences get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakePreferences_0(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i2.Preferences);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
